-- Tabla Persona
CREATE TABLE Persona (
    ID NUMBER PRIMARY KEY,
    nombres VARCHAR2(100),
    apellidos VARCHAR2(100),
    email VARCHAR2(150)
);

-- Tabla Profesor
CREATE TABLE Profesor (
    ID NUMBER PRIMARY KEY,
    tipo_contrato VARCHAR2(50),
    CONSTRAINT fk_profesor_persona FOREIGN KEY (ID) REFERENCES Persona(ID) ON DELETE CASCADE
);

-- Tabla Facultad
CREATE TABLE Facultad (
    ID NUMBER PRIMARY KEY,
    nombre VARCHAR2(100),
    decano_id NUMBER,
    CONSTRAINT fk_facultad_decano FOREIGN KEY (decano_id) REFERENCES Persona(ID) ON DELETE CASCADE
);

-- Tabla Programa
CREATE TABLE Programa (
    ID NUMBER PRIMARY KEY,
    nombre VARCHAR2(100),
    duracion NUMBER,
    registro VARCHAR2(50),
    facultad_id NUMBER,
    CONSTRAINT fk_programa_facultad FOREIGN KEY (facultad_id) REFERENCES Facultad(ID) ON DELETE CASCADE
);

-- Tabla Curso
CREATE TABLE Curso (
    ID NUMBER PRIMARY KEY,
    nombre VARCHAR2(100),
    programa_id NUMBER NOT NULL,
    activo NUMBER(1), -- 0 = falso, 1 = verdadero
    CONSTRAINT fk_curso_programa FOREIGN KEY (programa_id) REFERENCES Programa(ID) ON DELETE CASCADE
);

-- Tabla Estudiante
CREATE TABLE Estudiante (
    ID NUMBER PRIMARY KEY,
    codigo NUMBER UNIQUE,
    programa_id NUMBER NOT NULL,
    activo NUMBER(1),
    promedio NUMBER(3,2),
    CONSTRAINT fk_estudiante_persona FOREIGN KEY (ID) REFERENCES Persona(ID) ON DELETE CASCADE,
    CONSTRAINT fk_estudiante_programa FOREIGN KEY (programa_id) REFERENCES Programa(ID) ON DELETE CASCADE
);

-- Tabla Inscripcion
CREATE TABLE Inscripcion (
    estudianteID NUMBER,
    cursoID NUMBER,
    anio NUMBER,
    semestre NUMBER,
    CONSTRAINT pk_inscripcion PRIMARY KEY (estudianteID, cursoID, anio, semestre),
    CONSTRAINT fk_inscripcion_estudiante FOREIGN KEY (estudianteID) REFERENCES Estudiante(ID) ON DELETE CASCADE,
    CONSTRAINT fk_inscripcion_curso FOREIGN KEY (cursoID) REFERENCES Curso(ID) ON DELETE CASCADE
);

-- Tabla CursoProfesor
CREATE TABLE CursoProfesor (
    cursoID NUMBER,
    profesorID NUMBER,
    anio NUMBER,
    semestre NUMBER,
    CONSTRAINT pk_cursoprofesor PRIMARY KEY (profesorID, cursoID, anio, semestre),
    CONSTRAINT fk_cursoprofesor_curso FOREIGN KEY (cursoID) REFERENCES Curso(ID) ON DELETE CASCADE,
    CONSTRAINT fk_cursoprofesor_profesor FOREIGN KEY (profesorID) REFERENCES Profesor(ID) ON DELETE CASCADE
);

--------------------------------------------------------------------------------
-- Insertando datos con MERGE (forma compatible con Oracle)
--------------------------------------------------------------------------------

-- Persona
MERGE INTO Persona p
USING (SELECT 1 AS ID, 'Decano1' AS nombres, 'Apellido1' AS apellidos, 'decano1@uni.edu' AS email FROM dual) s
ON (p.ID = s.ID)
WHEN MATCHED THEN UPDATE SET p.nombres = s.nombres, p.apellidos = s.apellidos, p.email = s.email
WHEN NOT MATCHED THEN INSERT (ID, nombres, apellidos, email) VALUES (s.ID, s.nombres, s.apellidos, s.email);

MERGE INTO Persona p
USING (SELECT 2 AS ID, 'Decano2', 'Apellido2', 'decano2@uni.edu' FROM dual) s
ON (p.ID = s.ID)
WHEN MATCHED THEN UPDATE SET p.nombres = s."Decano2", p.apellidos = s."Apellido2", p.email = s."decano2@uni.edu"
WHEN NOT MATCHED THEN INSERT (ID, nombres, apellidos, email) VALUES (s.ID, 'Decano2', 'Apellido2', 'decano2@uni.edu');

-- ⚠️ Repite la misma estructura para todos los inserts
-- (Oracle no permite insertar múltiples filas en un MERGE de una sola vez).
